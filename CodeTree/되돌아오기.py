# 되돌아오기
# (0, 0)에서 시작하여 총 N번 움직여보려고 합니다. N번에 걸쳐 움직이려는 방향과 움직일 거리가 주어지고, 1초에 한 칸씩 움직인다고 했을 때, 몇 초 뒤에 처음으로 다시 (0, 0)에 돌아오게 되는지를 판단하는 프로그램을 작성해보세요.

# 입력 형식
# 첫 번째 줄에 정수 N이 주어집니다.

# 두 번째 줄부터는 N개의 줄에 걸쳐 각 줄마다 이동방향과 이동한 거리가 공백을 사이에 두고 주어집니다. 방향은 W, S, N, E중에 하나이며 각각 서, 남, 북, 동쪽으로 이동함을 의미합니다.

# 1 ≤ N ≤ 100
# 1 ≤ 한 번에 움직이는 거리 ≤ 10
# 출력 형식
# 첫 번째 줄에 다시 시작점으로 되돌아오는 데 걸리는 시간을 출력합니다. 만약 N번 이동을 진행했는데도 시작점으로 돌아오지 못했다면 -1을 출력합니다.

# 입출력 예제
# 예제1
# 입력:

# 6
# N 3
# E 2
# S 3
# W 4
# S 5
# E 8
# 출력:

# 10
# 예제 설명


# 위로 3칸, 오른쪽으로 2칸, 아래로 3칸 이동 후 왼쪽으로 이동하던 도중에 처음 위치로 되돌아 오게 됩니다.
# 왼쪽으로 이동시 2칸을 이동하면 처음 위치로 오게 되므로, 총 걸리는 시간은 10초 입니다.

# 제한
# 시간 제한: 1000ms
# 메모리 제한: 80MB
n=int(input())
command=[list(map(str, input().split())) for _ in range(n)]
dy, dx=[1, 0, -1, 0], [0, 1, 0, -1]
dr={'N': 0, 'E': 1, 'S': 2, 'W': 3}
y, x=0, 0
cnt=0
for i in range(n):
    for j in range(int(command[i][1])):
        y+=dy[dr[command[i][0]]]
        x+=dx[dr[command[i][0]]]
        cnt+=1
        if (y, x)==(0, 0):
            break
    if (y, x)==(0, 0):
        break
if (y, x)==(0, 0):
    print(cnt)
else:
    print(-1)
