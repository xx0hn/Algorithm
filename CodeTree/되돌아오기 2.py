#되돌아오기 2
# 좌표평면 위 (0, 0)에서 북쪽을 향한 상태에서 움직이는 것을 시작하려 합니다. N개의 명령에 따라 총 N번 움직이며, 명령 L이 주어지면 왼쪽으로 90도 방향 전환을, 명령 R이 주어지면 오른쪽으로 90도 방향전환을 하고, 명령 F가 주어지면 바라보고 있는 방향으로 한칸 이동하려고 합니다. 1초에 한 칸씩 움직이며, 회전에도 1초의 시간이 걸린다 했을 때, 몇 초 뒤에 처음으로 다시 (0, 0)에 돌아오게 되는지를 판단하는 프로그램을 작성해보세요.

# 입력 형식
# 첫 번째 줄에 문자 ‘L', ‘R', 그리고 'F’로만 이루어진 문자열이 하나 주어집니다. 단, 첫 번째 문자는 항상 'F'로 주어짐을 가정해도 좋습니다.

# 1 ≤ 명령의 길이 ≤ 100,000
# 출력 형식
# 첫 번째 줄에 다시 시작점으로 되돌아오는 데 걸리는 시간을 출력합니다. 만약 N번 이동을 진행했는데도 시작점으로 돌아오지 못했다면 -1을 출력합니다.

# 입출력 예제
# 예제1
# 입력:

# FFFRFFRFFFRFFFFFF
# 출력:

# 13
# 예제 설명


# 처음 (0, 0)에서 북쪽으로 3칸 이동한 뒤, 오른쪽으로 90' 회전하고, 다시 2칸 이동한 뒤, 오른쪽으로 90' 회전하고, 다시 3칸 이동한 뒤, 오른쪽으로 90' 회전하고, 다시 2칸 이동하면 처음으로 돌아오게 됩니다. 따라서 처음으로 돌아오는 데 총 13초가 소요됩니다.

# 제한
# 시간 제한: 1000ms
# 메모리 제한: 80MB
commands=str(input())
y, x, d=0, 0, 0
dy=[1, 0, -1, 0]
dx=[0, 1, 0, -1]
time=0
for com in commands:
    time+=1
    if com=='R':
        d=(d+1)%4
    elif com=='L':
        d=(d+3)%4
    else:
        y+=dy[d]
        x+=dx[d]
    if (y, x)==(0, 0):
        break
if (y, x)==(0, 0):
    print(time)
else:
    print(-1)
