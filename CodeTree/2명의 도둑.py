# 2명의 도둑
# 2명의 도둑이 N*N 크기의 방에서 물건을 훔치려 합니다. 두 도둑은 각각 하나의 행을 정해 그 행 내에 연속한 M개의 열에 있는 물건들을 훔칠 수 있습니다. 두 도둑이 같은 행을 고를 수는 있지만, 같은 행을 골랐을 때에는 선택한 M개의 열이 서로 겹쳐서는 안됩니다. 즉, 두 도둑이 선택한 크기 M의 영역이 서로 겹쳐서는 안됩니다.

# 다음은 M이 2일 때 가능한 두 도둑이 물건을 훔칠 위치의 예시입니다.



# 방 내의 각 위치마다 물건들이 하나씩 있고, 각 물건의 무게가 적혀있습니다. 물건을 많이 훔칠수록 좋지만 두 도둑 모두 각각이 들 수 있는 최대 무게가 C이기 때문에 두 도둑 모두 각각이 선택한 연속한 M개의 열에 있는 물건들 중 고른 물건들의 합이 C를 넘지 않도록 물건을 골라야만 합니다. 즉, 선택한 연속한 M개의 열에 있는 물건들의 무게의 합이 C를 넘지 않는다면 해당 물건들을 전부 고를 수 있지만, 만약 무게의 합이 C를 넘는다면 그 중에 적절하게 골라서 고른 물건들의 무게의 합이 C가 넘지 않도록 가져가야 합니다.

# 예를 들어 위의 왼쪽 예에서 C가 8인 경우 2번째 행에서 고른 도둑은 물건을 2개 다 고를 수 있지만, 4번째 행에서 고른 도둑의 경우 8, 4를 동시에 고를 수는 없습니다.



# 각 물건으로 부터 얻을 수 있는 가치는 무게 * 무게로 정해집니다. 이런 상황에서 도둑들이 훔칠 물건들을 잘 골라 주어진 조건을 만족하면서 얻을 수 있는 가치의 총 합 중 최댓값을 구하는 프로그램을 작성해보세요.

# 예를 들어 다음의 예에서 M = 2, C = 8일 경우 두 도둑이 얻을 수 있는 가치의 총 합의 최대는 114 입니다. (8 x 8 + 7 x 7 + 1 x 1 = 114)



# 입력 형식
# 첫째 줄에는 N, M, C가 공백을 사이에 두고 주어집니다.

# 둘째 줄 부터는 N개의 줄에 걸쳐 각 행에 있는 N개의 물건들의 무게가 공백을 사이에 두고 주어집니다.

# 3 ≤ N ≤ 10

# 1 ≤ M ≤ 5, M ≤ N

# 10 ≤ C ≤ 30

# 1 ≤ 물건의 무게 ≤ 9

# 출력 형식
# 두 도둑이 얻을 수 있는 가치의 총 합 중 최댓값을 출력합니다.

# 입출력 예제
# 예제1
# 입력:

# 4 3 10
# 1 8 2 5
# 2 6 4 7
# 2 3 4 5
# 1 2 4 2
# 출력:

# 120
# 예제2
# 입력:

# 6 2 8
# 1 2 1 3 5 7
# 2 5 3 1 7 4
# 3 3 2 7 1 5
# 6 5 5 8 4 4
# 7 1 6 2 5 2
# 5 3 4 5 6 7
# 출력:

# 114
# 제한
# 시간 제한: 1000ms
# 메모리 제한: 80MB
n, m, c=map(int, input().split())
grid=[list(map(int, input().split())) for _ in range(n)]
answer=0
tmp=[]
def chk(y1, x1, y2, x2):
    if x1+m-1>=n or x2+m-1>=n:
        return False
    if y1!=y2:
        return True
    if not (x1>x2+m-1 or x1+m-1<x2):
        return False
    return True
def get_result(cur, w, sm):
    global answer
    if cur==m:
        if w<=c:
            answer=max(answer, sm)
        return
    get_result(cur+1, w+tmp[cur], sm+tmp[cur]**2)
    get_result(cur+1, w, sm)
def get_max(y, x):
    global tmp, answer
    answer=0
    tmp=grid[y][x:x+m]
    get_result(0, 0, 0)
    return answer
for y1 in range(n):
    for x1 in range(n):
        for y2 in range(n):
            for x2 in range(n):
                if chk(y1, x1, y2, x2):
                    answer=max(answer, get_max(y1, x1)+get_max(y2, x2))
print(answer)
