# 주사위 던지기
# 다음과 같이 6개의 면으로 이루어져있는 주사위가 하나 주어집니다.



# 각 면에는 1에서 6 사이의 숫자가 적혀있으며, 마주보는 면 끼리 적혀있는 숫자의 합은 7이 됩니다.

# 이때 이 주사위를 위에서 주어진 상태 그대로 n * n 크기의 빈 격자판 위의 특정 위치에 올려 놓고, k번에 걸쳐 상하좌우 중 한 방향으로 딱 한 칸을 이동하도록 굴리는 것을 반복하려고 합니다. 처음 주사위가 놓여지는 것을 포함하여, 각 주사위가 격자판에 닿을때마다 격자판에는 해당 위치에 주사위의 아랫면에 적혀있던 숫자가 적히게 됩니다. 이미 해당 위치에 숫자가 적혀있었더라도, 새로 숫자가 적히게 됩니다. 처음 주사위가 놓여져 있는 방향은, 위의 그림에서 주어진 것과 같습니다.

# 예를 들어 다음과 같이 2행 3열에서 주사위를 놓고 시작해보는 경우를 살펴보겠습니다.



# 처음 바닥면에는 숫자 6이 쓰여져 있으므로, 격자판의 2행 3열에는 숫자 6이 적히게 됩니다.

# 이제 주사위를 왼쪽, 아래, 오른쪽, 위 순서대로 굴려보겠습니다.

# 왼쪽으로 굴린 후의 모습은 다음과 같으며, 이때는 주사위의 바닥면에 숫자 4가 오게 되므로 격자판의 2행 2열 위치에 숫자 4가 적히게 됩니다.



# 마찬가지 방식으로 아래, 오른쪽, 위 순서대로 굴리게 되면, 다음과 같이 주사위와 격자판의 상태가 바뀌게 됩니다.







# 이 경우라면 주사위는 굴리는 것을 전부 진행한 이후에 n * n 격자판에 써있는 숫자들의 합은 총 16이 됩니다.



# 초기 주사위가 놓여져 있는 위치와 주사위를 굴릴 방향들이 주어졌을 때, 최종적으로 격자판에 적혀있는 숫자의 총합을 계산하는 프로그램을 작성해보세요.

# 입력 형식
# 첫 번째 줄에는 격자의 크기를 나타내는 n과 주사위를 굴릴 횟수 m, 그리고 초기 주사위의 위치 r, c가 각각 공백을 사이에 두고 주어집니다. r, c는 처음에 주사위가 r행 c열에 놓여있음을 의미합니다. (1 ≤ r, c ≤ n)

# 두 번째 줄에는 방향 정보를 나타내는 m개의 문자가 공백을 사이에 두고 주어집니다. 각 문자는 ‘L', ‘R’, ‘U’, 'D’ 중 하나이며 순서대로 왼쪽, 오른쪽, 위, 아래 방향을 의미합니다.

# 1 ≤ n ≤ 100

# 1 ≤ m ≤ 10,000

# 출력 형식
# 주사위를 모두 굴린 이후에 격자판에 적혀있는 숫자들의 총 합을 출력합니다. 만약 굴리는 도중 해당 방향으로 주사위를 굴렸을 때 격자 밖으로 벗어나게 되는 경우라면, 주사위를 굴리지 않고 그다음 과정을 수행해야만 합니다.

# 입출력 예제
# 예제1
# 입력:

# 4 4 2 3
# L D R U
# 출력:

# 16
# 예제2
# 입력:

# 4 4 2 3
# L L L L
# 출력:

# 11
# 제한
# 시간 제한: 1000ms
# 메모리 제한: 80MB
n, m, r, c=map(int, input().split())
grid=[[0 for _ in range(n)] for _ in range(n)]
r, c=r-1, c-1
commands=list(map(str, input().split()))
cur=1
u, f, rr=1, 2, 3
mapping={'R': 0, 'L': 1, 'U': 2, 'D': 3}
dr, dc=[0, 0, -1, 1], [1, -1, 0, 0]
def move(d):
    global r, c, cur, u, f, rr
    nr, nc=r+dr[mapping[d]], c+dc[mapping[d]]
    if 0<=nr<n and 0<=nc<n:
        if d=='R':
            u, f, rr=7-rr, f, u
        if d=='L':
            u, f, rr=rr, f, 7-u
        if d=='U':
            u, f, rr=f, 7-u, rr
        if d=='D':
            u, f, rr=7-f, u, rr
        grid[nr][nc]=7-u
        r, c=nr, nc
def get_sum():
    result=0
    for i in range(n):
        for j in range(n):
            result+=grid[i][j]
    return result
grid[r][c]=6
for i in range(m):
    move(commands[i])
print(get_sum())
