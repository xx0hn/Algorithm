# 핀볼게임
# 0, 1, 2 숫자들로만 이루어진 n * n 크기의 격자판에서 핀볼 게임을 진행해보려고 합니다. 0은 빈 공간을, 1은 / 모양을, 2는 \ 모양을 의미합니다. 숫자가 1이나 2일 경우 구슬이 해당 위치로 진입했을 때, 바에 부딪혀 진행방향이 바뀌게 되며, 진행하던 구슬이 격자 밖으로 나가게 되면 게임이 끝나게 됩니다. 구슬이 한 칸 움직이는 데는 1초의 시간이 소요되며, 격자안으로 들어가는 시간과 격자밖으로 나오는 시간 까지 포함하여 계산합니다.



# 구슬은 단 하나만 이용하며, 다음과 같이 4 * n개의 지점 중 한 곳에서 정해진 방향으로만 시작이 가능합니다.



# 만약 구슬을 다음의 위치 두고 게임을 시작하게 된다면, 8초 후 격자 밖으로 나오게 됩니다.



# 하지만 다음 위치에서 시작을 하면, 10초 후 격자 밖으로 나오게 됩니다.



# 격자판의 상태가 주어졌을 때, 시작점을 적절하게 선택하여 격자 밖으로 나오는데까지 걸리는 시간이 최대가 되도록 하는 프로그램을 작성해보세요.

# 입력 형식
# 첫 번째 줄에는 격자의 크기를 나타내는 n이 주어집니다.

# 두 번째 줄 부터는 n개의 줄에 걸쳐 각 행에 해당하는 n개의 숫자가 공백을 사이에 두고 주어집니다. 숫자는 0, 1, 2 중 하나이며, 0은 빈 칸을, 1은 / 모양을, 2는 \ 모양을 의미합니다.

# 1 ≤ n ≤ 100
# 출력 형식
# 격자 밖으로 나오는 데까지 걸리는 시간 중 가장 오래 걸리는 시간을 출력합니다.

# 입출력 예제
# 예제1
# 입력:

# 5
# 0 0 0 0 0
# 0 0 0 0 0
# 1 0 1 0 2
# 0 0 0 0 0
# 0 0 1 0 2
# 출력:

# 10
# 예제2
# 입력:

# 5
# 1 1 1 1 1
# 1 1 1 1 1
# 1 1 1 1 1
# 1 1 1 1 1
# 1 1 1 1 1
# 출력:

# 10
# 제한
# 시간 제한: 1000ms
# 메모리 제한: 80MB
n=int(input())
grid=[list(map(int, input().split())) for _ in range(n)] # 1:/, 2:\
dy, dx=[1, 0, -1, 0], [0, -1, 0, 1]
def pinball(y, x, d):
    time=1
    while (0<=y<n and 0<=x<n):
        if grid[y][x]==1:
            if d%2==0:
                d=(d+1)%4
            elif d%2==1:
                d=(d+3)%4
        if grid[y][x]==2:
            if d%2==0:
                d=(d+3)%4
            elif d%2==1:
                d=(d+1)%4
        y, x=y+dy[d], x+dx[d]
        time+=1
    return time
answers=[]
for i in range(n):
    answers.append(pinball(0, i, 0))
    answers.append(pinball(i, n-1, 1))
    answers.append(pinball(n-1, i, 2))
    answers.append(pinball(i, 0, 3))
print(max(answers))
