# 격자 위의 편안한 상태
# N * N 크기의 격자 위에 총 M번에 걸쳐 색칠을 진행합니다. 한 번에 한 칸만 색칠하며, 색칠을 한 직후 해당 칸이 '편안한 상태'에 놓여 있는지를 확인하려 합니다. ‘편안한 상태’란 방금 막 칠해진 칸을 기점으로 위 아래 양옆으로 인접한 4개의 칸 중 격자를 벗어나지 않는 칸에 색칠되어 있는 칸이 정확히 3개인 경우를 뜻합니다. 색칠할 칸이 주어질 때마다 해당 칸을 칠한 직후 막 칠한 칸이 편안한 상태에 있는지를 계속 알아내는 프로그램을 작성해보세요.

# 입력 형식
# 첫 번째 줄에는 정수 N과 M이 주어집니다.

# 두 번째 줄부터는 M개의 줄에 걸쳐 각 줄마다 색칠할 칸의 위치 (r, c) 가 공백을 사이에 두고 주어집니다. 이는 r행 c열에 색칠해야 함을 의미하며, 색칠을 동일한 칸에 2번 이상 하게되는 경우는 없다고 가정해도 좋습니다.

# 1 ≤ N ≤ 100
# 1 ≤ M ≤ N * N
# 1 ≤ r, c ≤ N
# 출력 형식
# M개의 줄에 걸쳐 답을 출력합니다. 각 줄에 대해 해당 칸이 주어져 격자에 칠한 즉시, 해당 칸이 편안한 상태에 있다면 1, 아니라면 0을 출력합니다.

# 입출력 예제
# 예제1
# 입력:

# 4 8
# 1 2
# 2 1
# 2 3
# 2 2
# 3 3
# 4 2
# 3 2
# 4 3
# 출력:

# 0
# 0
# 0
# 1
# 0
# 0
# 1
# 0
# 예제 설명
# 4번째로 주어진 칸에 색칠했을 때, 2행 2열은 ‘편안한 상태’가 됩니다.





# 또, 7번째로 주어진 칸을 칠했을 때, 3행 2열은 ‘편안한 상태’가 됩니다.




# Hint
# N * N 크기의 비어있는 격자(전부 0으로 초기화 되어있는)를 미리 만들어놓은 뒤, 색칠해야 할 칸이 주어질 때 마다 각 칸에 숫자 1을 적어 색칠되었음을 표기하는 방법으로 진행하면 문제를 쉽게 해결할 수 있습니다.

# 제한
# 시간 제한: 1000ms
# 메모리 제한: 80MB
n, m=map(int, input().split())
grid=[[0 for _ in range(n+1)] for _ in range(n+1)]
dys=[1, 0, -1, 0]
dxs=[0, 1, 0, -1]
def chk_range(y, x):
    return 1<=y<=n and 1<=x<=n
for _ in range(m):
    y, x=map(int, input().split())
    grid[y][x]=1
    cnt=0
    for dy, dx in zip(dys, dxs):
        ny=y+dy
        nx=x+dx
        if chk_range(ny, nx) and grid[ny][nx]==1:
            cnt+=1
    if cnt==3:
        print(1)
    else:
        print(0)
